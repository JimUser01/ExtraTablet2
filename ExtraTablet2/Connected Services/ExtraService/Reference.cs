//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExtraService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.extra-assistance.gr/", ConfigurationName="ExtraService.Service1Soap")]
    public interface Service1Soap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/GeneralUsageRoad", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void GeneralUsageRoad(string UserName, string Password, string Ticket, string UniqueId, string SQlCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/GeneralUsageRoad", ReplyAction="*")]
        System.Threading.Tasks.Task GeneralUsageRoadAsync(string UserName, string Password, string Ticket, string UniqueId, string SQlCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/GeneralTableRoad", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GeneralTableRoad(string UserName, string Password, string Ticket, string UniqueId, string SQlCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/GeneralTableRoad", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GeneralTableRoadAsync(string UserName, string Password, string Ticket, string UniqueId, string SQlCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/SendImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendImage(string UserName, string Password, string Ticket, string UniqueId, string whichImage, string tabletCareFormCode, string imageArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/SendImage", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendImageAsync(string UserName, string Password, string Ticket, string UniqueId, string whichImage, string tabletCareFormCode, string imageArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/GetImageFileWithString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetImageFileWithString(string UserName, string Password, string Ticket, string UniqueId, string ImageFileName, string CallCode, string ImageInString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/GetImageFileWithString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetImageFileWithStringAsync(string UserName, string Password, string Ticket, string UniqueId, string ImageFileName, string CallCode, string ImageInString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/GetDamageDocumentWithString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDamageDocumentWithString(string UserName, string Password, string Ticket, string UniqueId, string ImageFileName, string CallCode, string ImageInString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/GetDamageDocumentWithString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDamageDocumentWithStringAsync(string UserName, string Password, string Ticket, string UniqueId, string ImageFileName, string CallCode, string ImageInString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/CreatePdfDriverForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreatePdfDriverForm(string UserName, string Password, string Ticket, string UniqueId, string CallCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/CreatePdfDriverForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreatePdfDriverFormAsync(string UserName, string Password, string Ticket, string UniqueId, string CallCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/CreateFDPdfDriverForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateFDPdfDriverForm(string UserName, string Password, string Ticket, string UniqueId, string CallCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.extra-assistance.gr/CreateFDPdfDriverForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateFDPdfDriverFormAsync(string UserName, string Password, string Ticket, string UniqueId, string CallCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface Service1SoapChannel : ExtraService.Service1Soap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class Service1SoapClient : System.ServiceModel.ClientBase<ExtraService.Service1Soap>, ExtraService.Service1Soap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1SoapClient(EndpointConfiguration endpointConfiguration) : 
                base(Service1SoapClient.GetBindingForEndpoint(endpointConfiguration), Service1SoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1SoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1SoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1SoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1SoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void GeneralUsageRoad(string UserName, string Password, string Ticket, string UniqueId, string SQlCode)
        {
            base.Channel.GeneralUsageRoad(UserName, Password, Ticket, UniqueId, SQlCode);
        }
        
        public System.Threading.Tasks.Task GeneralUsageRoadAsync(string UserName, string Password, string Ticket, string UniqueId, string SQlCode)
        {
            return base.Channel.GeneralUsageRoadAsync(UserName, Password, Ticket, UniqueId, SQlCode);
        }
        
        public string GeneralTableRoad(string UserName, string Password, string Ticket, string UniqueId, string SQlCode)
        {
            return base.Channel.GeneralTableRoad(UserName, Password, Ticket, UniqueId, SQlCode);
        }
        
        public System.Threading.Tasks.Task<string> GeneralTableRoadAsync(string UserName, string Password, string Ticket, string UniqueId, string SQlCode)
        {
            return base.Channel.GeneralTableRoadAsync(UserName, Password, Ticket, UniqueId, SQlCode);
        }
        
        public string SendImage(string UserName, string Password, string Ticket, string UniqueId, string whichImage, string tabletCareFormCode, string imageArray)
        {
            return base.Channel.SendImage(UserName, Password, Ticket, UniqueId, whichImage, tabletCareFormCode, imageArray);
        }
        
        public System.Threading.Tasks.Task<string> SendImageAsync(string UserName, string Password, string Ticket, string UniqueId, string whichImage, string tabletCareFormCode, string imageArray)
        {
            return base.Channel.SendImageAsync(UserName, Password, Ticket, UniqueId, whichImage, tabletCareFormCode, imageArray);
        }
        
        public string GetImageFileWithString(string UserName, string Password, string Ticket, string UniqueId, string ImageFileName, string CallCode, string ImageInString)
        {
            return base.Channel.GetImageFileWithString(UserName, Password, Ticket, UniqueId, ImageFileName, CallCode, ImageInString);
        }
        
        public System.Threading.Tasks.Task<string> GetImageFileWithStringAsync(string UserName, string Password, string Ticket, string UniqueId, string ImageFileName, string CallCode, string ImageInString)
        {
            return base.Channel.GetImageFileWithStringAsync(UserName, Password, Ticket, UniqueId, ImageFileName, CallCode, ImageInString);
        }
        
        public string GetDamageDocumentWithString(string UserName, string Password, string Ticket, string UniqueId, string ImageFileName, string CallCode, string ImageInString)
        {
            return base.Channel.GetDamageDocumentWithString(UserName, Password, Ticket, UniqueId, ImageFileName, CallCode, ImageInString);
        }
        
        public System.Threading.Tasks.Task<string> GetDamageDocumentWithStringAsync(string UserName, string Password, string Ticket, string UniqueId, string ImageFileName, string CallCode, string ImageInString)
        {
            return base.Channel.GetDamageDocumentWithStringAsync(UserName, Password, Ticket, UniqueId, ImageFileName, CallCode, ImageInString);
        }
        
        public string CreatePdfDriverForm(string UserName, string Password, string Ticket, string UniqueId, string CallCode)
        {
            return base.Channel.CreatePdfDriverForm(UserName, Password, Ticket, UniqueId, CallCode);
        }
        
        public System.Threading.Tasks.Task<string> CreatePdfDriverFormAsync(string UserName, string Password, string Ticket, string UniqueId, string CallCode)
        {
            return base.Channel.CreatePdfDriverFormAsync(UserName, Password, Ticket, UniqueId, CallCode);
        }
        
        public string CreateFDPdfDriverForm(string UserName, string Password, string Ticket, string UniqueId, string CallCode)
        {
            return base.Channel.CreateFDPdfDriverForm(UserName, Password, Ticket, UniqueId, CallCode);
        }
        
        public System.Threading.Tasks.Task<string> CreateFDPdfDriverFormAsync(string UserName, string Password, string Ticket, string UniqueId, string CallCode)
        {
            return base.Channel.CreateFDPdfDriverFormAsync(UserName, Password, Ticket, UniqueId, CallCode);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.Service1Soap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.Service1Soap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.Service1Soap))
            {
                return new System.ServiceModel.EndpointAddress("http://datapc/ExtraTabletWebService/Service1.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.Service1Soap12))
            {
                return new System.ServiceModel.EndpointAddress("http://datapc/ExtraTabletWebService/Service1.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            Service1Soap,
            
            Service1Soap12,
        }
    }
}
